# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Build, Publish, Deploy

on:
  push:
    branches:
      - 'main'

jobs:
  epic:
    name: One long epic job
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: "8.0.x"
      IMAGE_NAME: ${{ github.repository }}
    steps:
    -
      uses: actions/checkout@v4
    - 
      name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - 
      name: Version (.NET)
      run: dotnet --version
    - 
      name: Install dependencies (.NET)
      run: dotnet restore
    - 
      name: Build (.NET)
      run: dotnet build --configuration Release --no-restore
    - 
      name: Test (.NET)
      run: dotnet test --no-build --logger trx --results-directory "TestResults-${{ env.DOTNET_VERSION }}"
    - 
      name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results-${{ env.DOTNET_VERSION }}
        path: TestResults-${{ env.DOTNET_VERSION }}
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    -
      name: 'Az CLI login'
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - 
      name: 'Run Azure CLI commands'
      run: |
          az account show
          az group list
          pwd






  # # From https://docs.github.com/en/actions/publishing-packages/publishing-docker-images#publishing-images-to-docker-hub
  # # TODO - Separate into own workflow that depends on build/test?
  # # Whatever the case, we don't want to push to the registry on every git push
  # # Refined given docs from:
  # # - https://github.com/docker/login-action
  # # - https://github.com/docker/metadata-action
  # # - https://github.com/docker/build-push-action
  # push_to_docker_registry:
  #   name: Publish Docker image to ACR
  #   runs-on: ubuntu-latest
  #   env:
  #     REGISTRY: ghcr.io
  #     IMAGE_NAME: ${{ github.repository }}
  #   permissions: write-all
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4
  #     -
  #       name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     -
  #       name: Extract metadata (tags, labels) for Docker image 1
  #       id: meta1
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}1"
  #         tags: |
  #           type=schedule
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=sha
  #     -
  #       name: Extract metadata (tags, labels) for Docker image 2
  #       id: meta2
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}2"
  #         tags: |
  #           type=schedule
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=sha
  #     -
  #       name: Build and push WebApplication1
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./WebApplication1/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta1.outputs.tags }}
  #         labels: ${{ steps.meta1.outputs.labels }}
  #     -
  #       name: Build and push WebApplication2
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./WebApplication2/Dockerfile
  #         push: true
  #         tags: ${{ steps.meta2.outputs.tags }}
  #         labels: ${{ steps.meta2.outputs.labels }}


  # deploy_1_to_azure:
  #   name: Deploy Container 1 to Azure Container Apps
  #   runs-on: ubuntu-latest
  #   # TODO - We'll obviously need to understand environments and coordinate permissions
  #   environment: TEST
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Log in to Azure
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #     - name: Build and deploy Container App
  #       uses: azure/container-apps-deploy-action@v1
  #       with:
  #         appSourcePath: ${{ github.workspace }}/WebApplication1
  #         acrName: netchristest
  #         containerAppName: test20240101
  #         resourceGroup: test-20240101
